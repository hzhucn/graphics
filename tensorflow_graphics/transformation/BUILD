#Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Geometric transformation functionalities for tf-graphics.

# google internal)

licenses(["notice"])  # Apache 2.0

package(default_visibility = ["//visibility:public"])

py_library(
    name = "quaternion",
    srcs = ["quaternion.py"],
    srcs_version = "PY2AND3",
    deps = [
        ":rotation_matrix_3d",
        # google internal,
        "//tensorflow_graphics/util:asserts",
        "//tensorflow_graphics/util:safe_ops",
    ],
)

py_library(
    name = "axis_angle",
    srcs = ["axis_angle.py"],
    srcs_version = "PY2AND3",
    deps = [
        ":quaternion",
        ":rotation_matrix_3d",
        # google internal,
        "//tensorflow_graphics/util:asserts",
        "//tensorflow_graphics/util:safe_ops",
    ],
)

py_library(
    name = "rotation_matrix_common",
    srcs = ["rotation_matrix_common.py"],
    srcs_version = "PY2AND3",
    deps = [
        # google internal,
    ],
)

py_library(
    name = "rotation_matrix_3d",
    srcs = ["rotation_matrix_3d.py"],
    srcs_version = "PY2AND3",
    deps = [
        ":rotation_matrix_common",
        # package dep,
        # google internal,
        "//tensorflow_graphics/util:asserts",
        "//tensorflow_graphics/util:tfg_flags",
    ],
)

py_library(
    name = "rotation_matrix_2d",
    srcs = ["rotation_matrix_2d.py"],
    srcs_version = "PY2AND3",
    deps = [
        ":rotation_matrix_common",
        # google internal,
    ],
)

py_library(
    name = "euler",
    srcs = ["euler.py"],
    srcs_version = "PY2AND3",
    deps = [
        ":quaternion",
        ":rotation_matrix_3d",
        # google internal,
        "//tensorflow_graphics/util:asserts",
        "//tensorflow_graphics/util:safe_ops",
    ],
)

py_library(
    name = "transformation",
    srcs = ["__init__.py"],
    srcs_version = "PY2AND3",
    deps = [
        ":axis_angle",
        ":euler",
        ":quaternion",
        ":rotation_matrix_2d",
        ":rotation_matrix_3d",
        ":rotation_matrix_common",
    ],
)

py_library(
    name = "test_data",
    srcs = ["tests/test_data.py"],
    srcs_version = "PY2AND3",
    deps = [

        # google internal,
    ],
)

py_library(
    name = "test_helpers",
    srcs = ["tests/test_helpers.py"],
    srcs_version = "PY2AND3",
    deps = [
        ":axis_angle",
        ":quaternion",
        ":rotation_matrix_2d",
        ":rotation_matrix_3d",
        # google internal,
    ],
)

py_test(
    name = "quaternion_test",
    timeout = "long",
    srcs = ["tests/quaternion_test.py"],
    srcs_version = "PY2AND3",
    deps = [
        ":axis_angle",
        ":quaternion",
        ":rotation_matrix_3d",
        ":test_data",
        ":test_helpers",
        # package dep
        # package dep

        # google internal,
        "//tensorflow_graphics/util:test_case",
    ],
)

py_test(
    name = "axis_angle_test",
    srcs = ["tests/axis_angle_test.py"],
    srcs_version = "PY2AND3",
    deps = [
        ":axis_angle",
        ":quaternion",
        ":rotation_matrix_3d",
        ":test_helpers",
        # package dep
        # package dep

        # google internal,
        "//tensorflow_graphics/util:test_case",
    ],
)

py_test(
    name = "rotation_matrix_common_test",
    srcs = ["tests/rotation_matrix_common_test.py"],
    srcs_version = "PY2AND3",
    deps = [
        ":rotation_matrix_common",
        # package dep
        # google internal,
        "//tensorflow_graphics/util:test_case",
    ],
)

py_test(
    name = "rotation_matrix_3d_test",
    timeout = "long",
    srcs = ["tests/rotation_matrix_3d_test.py"],
    srcs_version = "PY2AND3",
    deps = [
        ":axis_angle",
        ":quaternion",
        ":rotation_matrix_3d",
        ":test_data",
        ":test_helpers",
        # package dep
        # package dep

        # google internal,
        "//tensorflow_graphics/util:test_case",
    ],
)

py_test(
    name = "rotation_matrix_2d_test",
    srcs = ["tests/rotation_matrix_2d_test.py"],
    srcs_version = "PY2AND3",
    deps = [
        ":rotation_matrix_2d",
        ":test_data",
        ":test_helpers",
        # package dep
        # package dep

        # google internal,
        "//tensorflow_graphics/util:test_case",
    ],
)

py_test(
    name = "euler_test",
    srcs = ["tests/euler_test.py"],
    srcs_version = "PY2AND3",
    deps = [
        ":axis_angle",
        ":euler",
        ":quaternion",
        ":rotation_matrix_3d",
        ":test_data",
        ":test_helpers",
        # package dep
        # package dep

        # google internal,
        "//tensorflow_graphics/util:test_case",
    ],
)
